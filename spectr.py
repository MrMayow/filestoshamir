import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq

# ========================================================================
# –ß–¢–ï–ù–ò–ï –ë–ò–¢–û–í–û–ô –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò –ò–ó –§–ê–ô–õ–ê
# ========================================================================
def read_bit_sequence(filename):
    """–ß—Ç–µ–Ω–∏–µ –±–∏—Ç–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0 –∏ 1 –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)"""
    try:
        with open(filename, 'r') as f:
            # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
            content = f.read().strip()
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –∏ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            content = content.replace(' ', '').replace('\n', '').replace('\r', '').replace('\t', '')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª
            bit_array = np.array([int(bit) for bit in content if bit in ['0', '1']], dtype=float)
            
            return bit_array
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

# ========================================================================
# –ê–í–¢–û–ö–û–†–†–ï–õ–Ø–¶–ò–Ø
# ========================================================================
def autocorrelation(x):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    n = len(x)
    x = x - np.mean(x)
    result = np.correlate(x, x, mode='full')
    return result[n-1:] / result[n-1]

# ========================================================================
# –°–ü–ï–ö–¢–†–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
# ========================================================================
def spectral_analysis(signal_data):
    """FFT –∞–Ω–∞–ª–∏–∑"""
    n = len(signal_data)
    fft_values = fft(signal_data)
    fft_freq = fftfreq(n, d=1.0)
    
    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã
    positive_idx = fft_freq > 0
    frequencies = fft_freq[positive_idx]
    amplitudes = np.abs(fft_values[positive_idx])
    
    return frequencies, amplitudes

# ========================================================================
# –û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó
# ========================================================================
def analyze_bit_sequence(filename):
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∏—Ç–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    print("="*70)
    print("–ê–ù–ê–õ–ò–ó –ë–ò–¢–û–í–û–ô –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*70)
    print(f"–§–∞–π–ª: {filename}\n")
    
    # 1. –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–•
    sig = read_bit_sequence(filename)
    
    if sig is None or len(sig) == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç!")
        return None
    
    N = len(sig)
    print(f"‚úì –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {N} –±–∏—Ç\n")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    zeros = np.sum(sig == 0)
    ones = np.sum(sig == 1)
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –ù—É–ª–µ–π: {zeros} ({zeros/N*100:.2f}%)")
    print(f"  ‚Ä¢ –ï–¥–∏–Ω–∏—Ü: {ones} ({ones/N*100:.2f}%)")
    
    # 2. –°–ü–ï–ö–¢–†–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
    print(f"\n--- –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (FFT) ---")
    frequencies, amplitudes = spectral_analysis(sig)
    
    # –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ 0.95
    max_amp = np.max(amplitudes)
    threshold = 0.95 * max_amp
    count_above = int(np.sum(amplitudes > threshold))
    
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞: {max_amp:.2f}")
    print(f"  ‚Ä¢ –ü–æ—Ä–æ–≥ (0.95 –æ—Ç –º–∞–∫—Å.): {threshold:.2f}")
    print(f"  ‚Ä¢ >>> –≠–ª–µ–º–µ–Ω—Ç–æ–≤ > 0.95 –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞: {count_above} <<<")
    
    # 3. –ê–í–¢–û–ö–û–†–†–ï–õ–Ø–¶–ò–Ø
    print(f"\n--- –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ---")
    autocorr = autocorrelation(sig)
    
    print(f"  ‚Ä¢ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏ –ª–∞–≥–µ 0: {autocorr[0]:.4f}")
    print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {np.min(autocorr):.4f}")
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {np.max(autocorr):.4f}")
    
    # 4. POLYFIT
    print(f"\n--- Polyfit –∞–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞ ---")
    n_fit = min(1000, len(frequencies))
    log_spectrum = np.log10(amplitudes[:n_fit] + 1e-10)
    poly_degree = 5
    coeffs = np.polyfit(frequencies[:n_fit], log_spectrum, poly_degree)
    poly_fit = np.polyval(coeffs, frequencies[:n_fit])
    
    print(f"  ‚Ä¢ –°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞: {poly_degree}")
    print(f"  ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {coeffs}")
    
    # 5. –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
    print(f"\n--- –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---")
    
    fig = plt.figure(figsize=(16, 12))
    fig.suptitle(f'–ê–Ω–∞–ª–∏–∑ –±–∏—Ç–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n'
                 f'N = {N}, –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–µ–∫—Ç—Ä–∞ > 0.95: {count_above}',
                 fontsize=14, fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ò—Å—Ö–æ–¥–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø–µ—Ä–≤—ã–µ —Ç–æ—á–∫–∏)
    ax1 = plt.subplot(3, 2, 1)
    display_points = min(1000, N)
    t = np.arange(display_points)
    plt.plot(t, sig[:display_points], 'b-', linewidth=0.8, marker='o', markersize=2)
    plt.title(f'–ë–∏—Ç–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø–µ—Ä–≤—ã–µ {display_points} –±–∏—Ç)', fontsize=11)
    plt.xlabel('–ü–æ–∑–∏—Ü–∏—è')
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    plt.ylim(-0.1, 1.1)
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –°–ø–µ–∫—Ç—Ä
    ax2 = plt.subplot(3, 2, 2)
    plt.plot(frequencies, amplitudes, 'r-', linewidth=0.6, alpha=0.7)
    plt.axhline(y=threshold, color='g', linestyle='--', linewidth=2,
                label=f'–ü–æ—Ä–æ–≥ 0.95 (n={count_above})')
    plt.title('–°–ø–µ–∫—Ç—Ä —Å–∏–≥–Ω–∞–ª–∞ (FFT)', fontsize=11)
    plt.xlabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –°–ø–µ–∫—Ç—Ä —Å Polyfit (–ª–æ–≥. —à–∫–∞–ª–∞)
    ax3 = plt.subplot(3, 2, 3)
    plt.semilogy(frequencies[:n_fit], amplitudes[:n_fit], 'b-', 
                 alpha=0.5, label='–°–ø–µ–∫—Ç—Ä', linewidth=0.8)
    plt.semilogy(frequencies[:n_fit], 10**poly_fit, 'r-', 
                 label=f'Polyfit (deg={poly_degree})', linewidth=2)
    plt.title('–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å Polyfit', fontsize=11)
    plt.xlabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞ (–ª–æ–≥. —à–∫–∞–ª–∞)')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    ax4 = plt.subplot(3, 2, 4)
    max_lag_display = min(100000, len(autocorr))
    lags = np.arange(max_lag_display)
    plt.plot(lags, autocorr[:max_lag_display], 'g-', linewidth=1)
    plt.title(f'–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ({max_lag_display} –ª–∞–≥–æ–≤)', fontsize=11)
    plt.xlabel('–õ–∞–≥')
    plt.ylabel('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
    plt.grid(True, alpha=0.3)
    plt.axhline(y=0, color='k', linestyle='-', linewidth=0.5, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 5: –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∏–∫–æ–≤ —Å–ø–µ–∫—Ç—Ä–∞
    ax5 = plt.subplot(3, 2, 5)
    plt.plot(frequencies, amplitudes, 'b-', alpha=0.3, linewidth=0.5)
    high_idx = amplitudes > threshold
    if np.sum(high_idx) > 0:
        plt.scatter(frequencies[high_idx], amplitudes[high_idx],
                   c='red', s=20, marker='o', label=f'–ü–∏–∫–∏ > 0.95 (n={count_above})', zorder=5)
    plt.axhline(y=threshold, color='g', linestyle='--', linewidth=2, label='–ü–æ—Ä–æ–≥ 0.95')
    plt.title('–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–∏–∫–∏ –≤—ã—à–µ 0.95 –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞', fontsize=11)
    plt.xlabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    ax6 = plt.subplot(3, 2, 6)
    ax6.axis('off')
    
    info_text = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë       –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÅ –§–∞–π–ª: {filename}

üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
   ‚Ä¢ –î–ª–∏–Ω–∞: {N} –±–∏—Ç
   ‚Ä¢ –ù—É–ª–µ–π: {zeros} ({zeros/N*100:.2f}%)
   ‚Ä¢ –ï–¥–∏–Ω–∏—Ü: {ones} ({ones/N*100:.2f}%)
   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {np.mean(sig):.4f}
   ‚Ä¢ –°—Ç. –æ—Ç–∫–ª.: {np.std(sig):.4f}

üéµ –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
   ‚Ä¢ –ú–∞–∫—Å. –∞–º–ø–ª–∏—Ç—É–¥–∞: {max_amp:.2f}
   ‚Ä¢ –ü–æ—Ä–æ–≥ (0.95): {threshold:.2f}
   ‚Ä¢ ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç–æ–≤ > 0.95: {count_above}

üîÑ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è:
   ‚Ä¢ –ü—Ä–∏ –ª–∞–≥–µ 0: {autocorr[0]:.4f}
   ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {np.min(autocorr):.4f}
   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {np.max(autocorr):.4f}

üìà Polyfit:
   ‚Ä¢ –°—Ç–µ–ø–µ–Ω—å: {poly_degree}
   ‚Ä¢ –ö–æ—ç—Ñ—Ñ. [0-2]: 
     {coeffs[0]:.2e}
     {coeffs[1]:.2e}
     {coeffs[2]:.2e}
    """
    
    ax6.text(0.05, 0.5, info_text, fontsize=9, verticalalignment='center',
             family='monospace', 
             bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.2))
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    import os
    output_file = f'analysis_{os.path.splitext(os.path.basename(filename))[0]}.png'
    plt.savefig(output_file, dpi=150, bbox_inches='tight')
    print(f"‚úì –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    plt.show()
    
    print("\n" + "="*70)
    print("–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("="*70)
    
    return {
        'length': N,
        'zeros': zeros,
        'ones': ones,
        'max_amplitude': max_amp,
        'threshold': threshold,
        'count_above_threshold': count_above,
        'autocorr_at_0': autocorr[0]
    }

# ========================================================================
# –ó–ê–ü–£–°–ö
# ========================================================================
if __name__ == "__main__":
    # –£–ö–ê–ñ–ò–¢–ï –ò–ú–Ø –í–ê–®–ï–ì–û –§–ê–ô–õ–ê –ó–î–ï–°–¨:
    filename = "filestoshamir/9x_8_17496.txt"
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    results = analyze_bit_sequence(filename)
